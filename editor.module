<?php
// $Id$

/**
 * @Implement of hook_menu()
 */
function editor_menu() {

  $items = array();

  $items['editor/upload/%'] = array(
    'load_functions' => array(2 => '%'),
    'access_arguments' => array('file upload'),
    'page_callback' => 'editor_page_upload',
    'page_arguments' => array(2),
    'file' => 'editor.page.inc',
  );

  $items['editor/view/%'] = array(
    'load_functions' => array(2 => '%'),
    'access_callback' => true,
    'page_callback' => 'editor_page_files',
    'page_arguments' => array(2),
    'file' => 'editor.page.inc',
  );

  $items['editor/swfupload'] = array(
    'description' => 'swfupload 上传处理',
    'access_arguments' => array('file upload'),
    'page_callback' => 'editor_page_swfupload',
    'file' => 'editor.page.inc',
  );

  $items['editor/custom/%'] = array(
    'description' => '编辑器自定义页面',
    'access_callback' => true,
    'load_functions' => array(2 => '%'),
    'page_callback' => 'editor_page_custom',
    'page_arguments' => array(2),
    'file' => 'editor.page.inc',
  );

  $items['editor/swfupload/html'] = array(
    'description' => 'swfupload 上传表单，可用于 iframe',
    'access_arguments' => array('file upload'),
    'page_callback' => 'editor_swfupload_html',
    'file' => 'editor.page.inc',
  );

  $items['admin/editor'] = array(
    'title' => '编辑器配置列表',
    'access_arguments' => array('admin editor settings'),
    'page_callback' => 'editor_admin_list',
    'file' => 'editor.admin.inc',
  );

  $items['admin/editor/settings'] = array(
    'title' => '编辑器全局设置',
    'access_arguments' => array('admin editor settings'),
    'page_callback' => 'dd_get_form',
    'page_arguments' => array('editor_admin_settings'),
    'file' => 'editor.admin.inc',
  );

  $items['admin/editor/add'] = array(
    'title' => '添加编辑器配置',
    'access_arguments' => array('admin editor create'),
    'page_callback' => 'dd_get_form',
    'page_arguments' => array('editor_admin_form'),
    'file' => 'editor.admin.inc',
  );

  $items['admin/editor/edit/%'] = array(
    'title' => '修改编辑器配置',
    'load_functions' => array(3 => '%'),
    'access_arguments' => array('admin editor update'),
    'page_callback' => 'dd_get_form',
    'page_arguments' => array('editor_admin_form', 3),
    'file' => 'editor.admin.inc',
  );

  return $items;
}

/**
 * @Implement of hook_prem()
 */
function editor_prem() {
  return array(
    'admin editor settings' => '浏览编辑器配置',
    'admin editor create' => '添加编辑器配置',
    'admin editor update' => '修改编辑器配置',
  );
}

/**
 * @Implement of hook_system_admin_menus()
 */
function editor_system_admin_menus() {
  return array(array(
    array(t('editor', '配置列表'), 'admin/editor'),
    array(t('editor', '全局设置'), 'admin/editor/settings'),
    array(t('editor', '添加编辑器配置'), 'admin/editor/add'),
  ), t('editor', '编辑器'));
}

/**
 * @Implement of hook_editor_info()
 *  定义编辑器，模块可使用本接口定义不同的编辑器实例。
 */
function editor_editor_info() {
  $editor = array();

  $editor['front_default'] = array(
    /**
     * 编辑器实例系统名称为 front_default，name 值为可读名称。
     *  注意，实例系统名称全站唯一，若与其它模块相同，将根据模块加载先后顺序覆盖。
     *  因此，尽量为实例使用前缀，如使用模块系统名称为前缀。
     *  管理员在后台添加的实例均统一前缀为：editor_ 请其它模块在定义时尽量避免使用此前缀
     * 该编辑器配置将应用于 admin/front 页面的首页默认内容表单
     */
    'name' => '默认首页内容', // 编辑器配置可读名称，名称将缓存到数据库，不需要使用 t() 进行多语言
    'status' => 1, // 实例状态，1、启用，0、不启用
    /**
     * 编辑器详细配置
     */
    'data' => array(
      // 'name' => 'ckeditor', // 指定编辑器，如：ckeditor、ueditor。通常不需要指定，由管理员自行设置
      'dom' => 'system_admin_front_type_value', // 作用的文本域 id，如：body、mytextarea 等，必须
      /**
       * 允许加载编辑器的页面。留空则将在所有页面寻找匹配的 dom 元素。
       * 必须是系统路径，如：admin user/login user/center 等，多个路径以 ; 号分隔
       * 若以斜杠(/)开始，将视作正则模式，如：/^admin\/.*?\/node/i
       * 该设置管理员可在后台更改
       */
      'path' => 'admin/front',
      
      // 需要加载的插件，不同编辑器插件名称可能不同，多个以 , 号分隔
      // 将提供常用编辑器的以下几种插件，swfupload smiley insertcode autosave bodybreak 
      'plugins' => 'swfupload,smiley,insertcode', // 需要加载的插件，不同编辑器插件名称可能不同，多个以 , 号分隔

      // 设置 swfupload，详细参数见 editor_get_swfupload() 
      'swfupload' => array(
        'file_types' => '*.png;*.jpg;*.gif'
      ),

      //'access' => array( // 权限设置，留空则所有可使用，管理员可在后台更改
      //  'rids' => array(), // 允许使用该编辑器的角色组 id
      //  'uids' => array(), // 允许使用该编辑器的用户 id
      //),

      /**
       * 编辑器所作用于的表单系统 id，该值通常是定义表单的函数名称
       * 可以为空，但指定该值，便于将通过编辑器上传的文件和 form_token 关联，进而与依附对象（如文章）关联
       * 当指定了该值， $GLOBALS['form_tokens'][$form_id] 必须存在，才会加载编辑器，以避免在不必要的页面加载多余 js
       */
      'form_id' => 'system_admin_front',

      /**
       * 编辑器所作用于的字段系统名称，比如：title、name，可以为空
       */
      'form_field_name' => 'value',

      /**
       * 文件上传设置，用于处理通过编辑器上传的文件
       * 可设置的参数与表单 file 字段，如：
       * array(
       *  '#disabled_upload' => false, // true：禁止从编辑器上传，默认 false：允许。
       *  '#disabled_view' => false, // true：禁止在编辑器中浏览已上传文件，默认 false：允许。
       *
       *  '#upload_image_url' => '', // 处理图片上传文件的路径，若留空，则使用默认： editor/upload。除非有特别需求，建议留空
       *  '#upload_file_url' => '', // 处理上传文件的路径，若留空，则使用默认： editor/upload。除非有特别需求，建议留空
       *
       *  '#view_image_url' => '', // 在编辑器中浏览本地图片文件以便插入，若留空，则使用默认：editor/view。除非有特别需求，建议留空
       *  '#view_file_url' => '', // 在编辑器中浏览本地所有文件以便插入，若留空，则使用默认：editor/view。除非有特别需求，建议留空
       *
       *  // 浏览本地文件时的过滤条件，有时候可能并不需要将所有已上传文件展示，可在此设置过滤条件，条件必须是 files 表中的字段
       *  '#view_args' => array(
       *    'ext_type' => '',
       *    'ext_id' => 1,
       *    'uid' => 1, // 若为 1，则表示只能浏览自己上传的文件，默认为 1，若为 -1，则表示可以浏览所有文件
       *  ),
       *
       *  // 用于验证和保存上传文件参数，如设置了 #upload_url 参数，则以下设置无效。以下设置均为可选
       *  '#validate' => array(
       *   'savepath' => '',// 存储路径，留空则使用默认路径。
       *   //'no_insert' => true, // 为 true 则文件信息不写入数据库
       *   //'title' => '', // 文件名或标题，不大于 255 字符
       *   //'filename' => '', // 路径中的文件名，可包含扩展名，若不指定，则使用 $_FILES['name']
       *   //'extension' => '', // 也可单独指定扩展名
       *   'ext_id' => 0, // 扩展 Id
       *   'ext_id2' => 0, // 扩展 Id
       *   // 扩展类型。假如是发布一篇文章，在文章发布前并不知道文章 id，此时通过编辑器上传的文件无法关联
       *   // 因此，针对这种情况，请不要设置 ext_type 参数，系统将自动把上传的文件 ext_type 设置为 form_token
       *   // 表单的 form_token 是唯一的，当文章保存成功后，以 ext_type 为条件，可完成关联
       *   // 可参见 comment 模块
       *   'ext_type' => '',
       *   'status' => 1, // 文件状态，默认为 1，即正常，通常可能需要设置为 0，在文章保存成功后，再以 form_token 为条件修改状态
       *   'image' => array( // 设置了该参数后，将只允许上传图片
       *     'type' => array('jpg', 'png', 'gif'),
       *     'size' => '200x300',
       *   ),
       *   //'filetype' => array('jpg', 'zip'),// 设置允许上传的图片类型，优先级低于 image 参数
       *   'filesize' => '300',// 允许的最大文件
       *   'usersize' => true, // 验证用户上传文件总大小
       *
       *   // 不支持的参数，请不要设置该参数，可能导致意外
       *   'call_function' => '',
       *  )
       * ),
       */
      'files' => array(
        '#validate' => array(
          'status' => 1,
          'savepath' => 'front_default',
          'ext_type' => 'front_default'
        )
      ),
      /**
       * 编辑器配置参数，不同编辑器可能定义的参数不一样
       */
      'config' => array(
        /**
         * 编辑器工具栏，各编辑器均预设四种类型：full、medium、small、mini。
         * 也可传递 js 数组，自行设置，如："['Blod', 'Copy']"，各编辑器按钮名称可能各异
         */
        'toolbar' => 'full', // 编辑器工具栏，各编辑器均预设四种类型：full、medium、small、mini。也可传递数组，自行设置，如：array()
      ),
    ),
  );

  return $editor;
}

// public editor_get_editor(array $v) {{{ 
/**
 * editor_get_editor
 *  编辑器实例化
 * @param array $v 
 *  编辑器实例配置，参数示例：
 *  array(
 *    'dom' => '', // textarea 文本域 id，必需
 *    // 其它参数见 editor_editor_info() 中的 data 值
 *  )
 * @param bool $is_load
 *  是否立即加载编辑器，默认为 true，否则只初始化，即只执行 init
 * @access public
 * @return void
 */
function editor_get_editor(array $v, $is_load = true) {
  global $user;

  if (!empty($v['access'])) {
    if (!empty($v['access']['uids'])) {
      $is_true = false;
      foreach (explode(',', $v['access']['uids']) as $uid) {
        if (trim($uid) == $user->uid) {
          $is_true = true;
        }
      }
      if (empty($is_true)) return false;
    } else if (!empty($v['access']['rids'])) {
      if (!empty($user->roles)) {
        $is_true = false;
        foreach ($v['access']['rids'] as $rid) {
          if (!empty($user->roles[$rid])) {
            $is_true = true;
          }
        }
        if (empty($is_true)) return false;       
      }
    }
  }

  if (empty($v['name'])) $v['name'] = var_get('editor_default', 'markitup');

  $file = DIDA_ROOT . '/' . dd_get_path('module', 'editor') . '/editor/' . $v['name'] . '/include.inc';

  // 指定的编辑器不存在
  if (!is_file($file)) {
    dd_set_message(t('editor', '编辑器 !name 不存在', array('!name' => $v['name'])), 'error');
    return false;
  }

  require_once $file;
  
  static $loaded;

  $edit = new $v['name']($v['dom']);

  if (!isset($loaded[$v['name']])) {
    $loaded[$v['name']] = 1;

    // 初始化，通常用于加载公用 js、css 文件
    $edit->init();

    // 加载预设工具栏按钮

    dd_add_js(array('editor' => array('toolbar' => array($v['name'] => $edit->toolbar()))), 'setting');
  }

  if (empty($is_load)) return true;

  $map = $edit->map();
 
  if (empty($v['config'])) $v['config'] = array();

  if (empty($v['config']['toolbar'])) {
    $v['config']['toolbar'] = 'full'; // 默认工具栏为 full
  }

  // 若为数组，则是自定义工具栏，反之则为预设
  if (!is_array($v['config']['toolbar'])) {
    if (in_array($v['config']['toolbar'], array('full', 'medium', 'small', 'mini'))) {
      $v['config']['toolbar'] = ':::code:::Dida.settings.editor.toolbar.' . $v['name'] . '.' . $v['config']['toolbar'];
    } else {
      $v['config']['toolbar'] = ':::code:::' . $v['config']['toolbar'];
    }
  } 

  $config = array();

  if (!empty($v['files'])) {
    if (empty($v['files']['#disabled_upload'])) {
      // 默认图片上传地址
      if (empty($v['files']['#upload_image_url'])) {
        $v['config'][$map['upload_image_url']] = url('editor/upload/' . $v['name'], array(
          'query' => 'type=image&form_token=' . $v['form_token'] . '&instances=' . $v['instances'] . '&name=' . $map['upload_image_name']
        ));
      } else {
        $v['config'][$map['upload_image_url']] = $v['files']['#upload_image_url'];
      }
      // 默认文件上传地址
      if (empty($v['files']['#upload_file_url'])) {
        $v['config'][$map['upload_file_url']] = url('editor/upload/' . $v['name'], array(
          'query' => 'type=file&form_token=' . $v['form_token'] . '&instances=' . $v['instances'] . '&name=' . $map['upload_image_name']
        ));
      } else {
        $v['config'][$map['upload_file_url']] = $v['files']['#upload_file_url'];
      }
    }

    if (empty($v['files']['#disabled_view'])) {

      // 默认图片管理器
      if (empty($v['files']['#view_image_url'])) {
        $v['config'][$map['view_image_url']] = url('editor/view/' . $v['name'], array(
          'query' => 'type=image&form_token=' . $v['form_token'] . '&instances=' . $v['instances']
        ));
      } else {
        $v['config'][$map['view_image_url']] = $v['files']['#view_image_url'];
      }
      // 默认文件管理器
      if (empty($v['files']['#view_file_url'])) {
        $v['config'][$map['view_file_url']] = url('editor/view/' . $v['name'], array(
          'query' => 'type=file&form_token=' . $v['form_token'] . '&instances=' . $v['instances']
        ));     
      } else {
        $v['config'][$map['view_file_url']] = $v['files']['#view_file_url'];
      }
    }
  }

  $v['config'] = array_merge($config, $v['config']);

  // 加载编辑器
  $edit->load($v);

}
// }}}

/**
 * 获取所有编辑器基本信息
 * @return array
 */
function editor_get_info() {
  if ($data = glob(DIDA_ROOT . '/' . dd_get_path('module', 'editor') . '/editor/*')) {
    $info = array();
    foreach ($data as $path) {
      if (is_dir($path) && is_file($path . '/include.inc')) {
        include_once $path . '/include.inc';
        $class = basename($path);
        if (method_exists($class, 'info')) $info[$class] = $class::info();
      }
    }
    return $info;
  }
}

/**
 * 编辑器接口
 */
Class EDITOR {
  
  public $path; // editor 模块路径

  public $dom; // 应用编辑器的 textarea id

  public function __construct($dom) {
    $this->dom = $dom;
    $this->path = dd_get_path('module', 'editor');
  }

  /**
   * 编辑器基本信息
   * @return array
   */
  static function info() {
    return array(
      'name' => t('editor', '百度编辑器'), // 必须
      'description' => t('editor', 'UEditor是由百度web前端研发部开发所见即所得富文本web编辑器'),
      'link' => 'http://ueditor.baidu.com/website/'
    );
  }

  // 初始化，通常载入公用 js、css 等
  public function init() {}
    
  // public load($data) {{{ 
  /**
   * load
   * 加载编辑器
   * @param array $data 
   *  编辑器设置，其中 $data['config'] 为必须，该参数等同于编辑器 config.js 中的配置
   * @access public
   * @return void
   */
  public function load(array $data) {
  }
  // }}}

  // 文件上传处理
  public function upload($filename, $validate) {}

  // public files($type) {{{ 
  /**
   * files
   * 文件管理，通常用于浏览已上传的文件，通过编辑器将文件插入编辑框
   * @param object $fetch
   *  数据库结果集，包含匹配的所有文件
   * @param string $type 
   *  编辑器应用类型，通常分为三种：image - 表示图片，link - 表示任意文件，flash - 表示 flash，video - 表示任意视频
   * @static
   * @access public
   * @return string
   */
  static function files($fetch, $type) {
    $output = '';
    return $output;
  }
  // }}}

  // public swfupload($type, $v = NULL) {{{ 
  /**
   * swfupload
   * 如编辑器需要在 iframe 使用 editor 模块提供的 swfupload 上传，需要实现这个方法
   * @param string $type 
   *  类型，目前仅有：settings，即 swfupload 设置
   * @param array $v 
   *  设置参数
   * @access public
   * @return void|array
   */
  static function swfupload($type, $v = NULL) {
    return;
  }
  // }}}

  // 定义编辑器按钮栏，各编辑器必需预设四种工具栏
  static function toolbar() {
    return array('full' => array(), 'medium' => array(), 'small' => array(), 'mini' => array());
  }

  // 将 editor 模块定义的参数映射到编辑器配置
  static function map() {
    // 以下为 ckeditor 的示例
    return array(
      // 服务器文件浏览地址
      'view_file_url' => 'filebrowserBrowseUrl',
      // 服务器图片文件浏览地址
      'view_image_url' => 'filebrowserImageBrowseUrl',
      // 文件上传地址
      'upload_file_url' => 'filebrowserUploadUrl',
      // 文件上传时 name 值
      'upload_file_name' => 'upload',
      // 图片上传地址
      'upload_image_url' => 'filebrowserImageUploadUrl',
      // 图片上传时 name 值
      'upload_image_name' => 'upload',
    );
  }
}

/**
 * @Implement of hook_init()
 */
function editor_init() {
  global $editor_disabled, $editor_alter_config;

  /**
   * array $editor_disabled
   * 禁用实例列表，当编辑器无法通过路径判断是否禁用时，通常使用此方法，将需要禁用的实例加入数组，以实例名为键名，如：
   *  $editor_disabled['comment'] = true;
   * 禁用实例名为 comment 的编辑器。
   *
   * array $editor_alter_config
   * 动态添加实例配置参数(限 data 部分，参见 editor_editor_info())，如：
   * $editor_alter_config['comment'] = array('name' => 'ckeditor'); // 设置该实例使用 ckeditor 编辑器
   * 通常应用于一个实例多处使用的场景，如：不同类型的评论表单
   *
   */
}

/**
 * @Implement of hook_exit()
 */
function editor_exit() {
  global $form_tokens, $editor_disabled, $editor_alter_config;
  
  if (!$editor = editor_get_instances()) return;
  
  dd_add_js(dd_get_path('module', 'editor') . '/editor.js');

  foreach ($editor as $type => $v) {
    // 已禁用该实例
    if (!empty($editor_disabled[$type])) continue;
    if (!empty($editor_alter_config[$type])) {
      foreach ($editor_alter_config[$type] as $key => $value) {
        if (!is_array($value) || empty($v[$key])) {
          $v[$key] = $value;
        } else {
          $v[$key] = array_merge($v[$key], $value);
        }
      }
    }
    
    // 如指定了 form_id，但却没有 form_token 值，跳过
    if (!empty($v['form_id']) && empty($form_tokens[$v['form_id']])) continue;

    // 检查显示路径设置
    if (!empty($v['path']) && !block_path_display(1, $v['path'])) continue;

    $v['form_token'] = $form_tokens[$v['form_id']];

    editor_get_editor($v);
  }
}

// public editor_get_instances() {{{ 
/**
 * editor_get_instances
 * 获取所有已启用的编辑器配置
 * @param string $name
 *  按指定实例名称获取，若未指定，则获取全部
 * @access public
 * @return array
 */
function editor_get_instances($name = NULL) {
  if (!$data = var_get('editor_instances')) {

    // 将所有模块定义的实例写入数据库
    editor_set_data();

    if ($fetch = db_query('SELECT type, data FROM {editor} WHERE status = 1')) {
      foreach ($fetch as $o) {
        $o->data = unserialize($o->data);
        if (empty($o->data['dom'])) continue;
        $o->data['instances'] = $o->type; // 实例系统名称
        $data[$o->type] = $o->data;
      }
    }
    var_set('editor_instances', $data);
  }

  return $name ? $data[$name] : $data;
}
// }}}

/**
 * @Implement of hook_system_cache_clear()
 */
function editor_system_cache_clear($op, $value = NULL) {
  if ($op == 'submit' && !empty($value['value']['cache_hook'])) {
    var_del('editor_instances', 0);
  }
}

// public editor_set_data() {{{ 
/**
 * editor_set_data
 * 将通过 hook_editor_info() 定义的编辑器实例写入 editor 表。
 * 注意，若 type 相同，则不写入。管理员在后台添加的实例均统一前缀为：editor_ 请模块定义时尽量避免使用此前缀
 * @access public
 * @return void
 */
function editor_set_data() {
  // 读取已有的编辑器实例
  $datas = array();
  if ($fetch = db_query('SELECT type FROM {editor}')) {
    foreach ($fetch as $o) {
      $datas[$o->type] = 1;
    }
  }
  
  $data = module_invoke_all('editor_info');
  
  foreach ($data as $type => $editor) {
    $editor['deleted'] = 0; // 不允许删除通过 hook_editor_info() 添加的编辑器实例
    // 若已存在，则不写入配置数据，避免将管理员自定义的数据覆盖，可通过管理后台恢复默认值来实现重置
    if (!empty($datas[$type])) {
      unset($editor['data']); 
      unset($editor['status']);
      $args = array('type');
    } else {
      $args = NULL;
    }

    $editor['type'] = $type;
    $editor['created'] = time();
    db_write_record('editor', $editor, $args);
  }

}
// }}}

/**
 * 获取 swfupload 批量上传所需的 js、html 等内容
 * @param string $dom
 *  html 元素 id，如：mydom，不指定将由自动分配
 * @param array $v
 *  配置参数，示例：
 *    array(
 *      'upload_url' => '', // 处理上传文件的路径，若不设置，则使用默认 editor/swfupload
 *      // 文件上传设置，与表单 file 字段 #validate 参数相同，将随文件以 post 方式发送到上传路径
 *      'validate' => array(
 *        'savepath' => '',
 *      ),
 *      // swfupload 配置参数，接口将默认设置这些参数，如想自定义，请在此设置
 *      'swfupload' => array(
 *        'file_size_limit' => '100 MB',
 *      ),
 *      // 自定义文字
 *      'text' => array(
 *      ),
 *    );
 * @param $html
 *  是否返回 html 代码，若不需要，则必须自行输出 html 内容
 * @returu 若 $html 为真，返回 swfupload 所需的 html 内容
 */
function editor_get_swfupload($v = array(), $dom = '', $html = 1) {
  static $i = 0;

  if (empty($dom)) $dom = 'dida_editor_swfupload_wrapper_' . $i;

  $path = dd_get_path('module', 'editor');
  
  $text = array(
    'list' => t('editor', '文件队列'),
    'stop' => t('editor', '暂停上传'),
    'start' => t('editor', '开始上传'),
    'description' => t('editor', '选择文件'),
  );
  
  if (!empty($v['text'])) $text = array_merge($text, $v['text']);
	
	$args = array(
    'upload_url' => url('editor/swfupload', array('query' => 'name=Filedata')),
		'flash_url' => f($path . '/swfupload/swfupload.swf'),
		'post_params' => array(
      '__SETPHPSESSID' => $GLOBALS['user']->session,
      '__SETUID' => $GLOBALS['user']->uid,
      'validate' => !empty($v['validate']) ? dd_encrypt(serialize($v['validate'])) : ''
    ),
		'file_size_limit' => '16 MB',
		'file_types' => '*.jpg;*.gif;*.png',
		'file_types_description' => $text['description'],
		'file_upload_limit' => 100,
		'file_queue_limit' => '0',
		'custom_settings' => array(
			'wrapper' => '#' . $dom,
			'fileLists' => '#dida_editor_swfupload_files_' . $i
		),
    'minimum_flash_version' => '9.0.28',
		'debug' => false,
    'button_image_url' => f($path . '/swfupload/button.png'),
		'button_width' => 70,
		'button_height' => 27,
		'button_placeholder_id' => 'dida_editor_swfupload_select_button_' . $i,
    'button_placeholder' => '$(\'#dida_editor_swfupload_select_button_' . $i .'\')[0]',
    'swfupload_loaded_handler' => 'Dida.swfupload.swfLoaded',
    'file_dialog_start_handler' => 'Dida.swfupload.dialogStart',
		'file_queued_handler' => 'Dida.swfupload.fileQueued',
		'file_queue_error_handler' => 'Dida.swfupload.fileQueueError',
    'file_dialog_complete_handler' => 'Dida.swfupload.dialogComplete',
		'upload_start_handler' => 'Dida.swfupload.uploadStart', 
		'upload_progress_handler' => 'Dida.swfupload.uploadProgress',
		'upload_error_handler' => 'Dida.swfupload.uploadError',
		'upload_success_handler' => 'Dida.swfupload.uploadSuccess',
    'upload_complete_handler' => 'Dida.swfupload.uploadComplete',
	);
	
  if (!empty($v['swfupload'])) {
    foreach ($v['swfupload'] as $key => $value) {
      if (!is_array($value)) {
        $args[$key] = $value;
      } else {
        $args[$key] = array_merge($args[$key], $value);
      }
    }
  }
  
  dd_add_css($path . '/swfupload/swfupload.css');

  dd_add_js($path . '/swfupload/swfupload.js');

  dd_add_js($path . '/swfupload/editor.swfupload.js');
  
  dd_add_js('$(\'#' . $dom . '\').swfupload(' . dd_to_js($args) . ')', 'inline', false, 'footer');
  
  $i++;

  if (empty($html)) return;

  $output = '<div id="'.$dom.'" class="dida_editor_swfupload_content dida_editor_swfupload_content">';

  if (empty($v['no_lists'])) {
    $output .= '<fieldset id="' . substr($args['custom_settings']['fileLists'], 1) . '" class="collapsible dida_editor_swfupload_fieldset">';
    if (empty($v['no_lists_text'])) {
      $output .= '<legend class="collapse-processed asc"><a href="#">' . $text['list'] . '</a></legend>';
    }
  }

  $output .= '</fieldset><div class="dida_editor_swfupload_button">';

  $output .= '<span id="' . $args['button_placeholder_id'] . '"></span>';
  
  if (empty($v['no_stop'])) {
    $output .= '<input type="button" class="dida_editor_swfupload_stop_upload" value="' . $text['stop'] . '" />';
  }

  if (empty($v['no_start'])) {
    $output .= '<input type="button" class="dida_editor_swfupload_start_upload" value="' . $text['start'] . '" />';
  }
  
  $output .= '</div></div>';

  return $output;
}

/**
 * 代码高亮
 */
function editor_get_highlighter() {
  static $loaded;

  if (!isset($loaded)) {
    $path = dd_get_path('module', 'editor') . '/syntaxhighlighter/';
    dd_add_css($path . 'sh.css');
    dd_add_js($path . 'sh.js');
    dd_add_js('SyntaxHighlighter.defaults["toolbar"] = false;SyntaxHighlighter.all();', 'inline_nojq');
  }

  $loaded = 1;
}

/**
 * 代码高亮
 * @param (array) $mat
 */
function _editor_filter_code_higth($mat) {
  if ($mat[2]) {
    $output = '<pre class="brush: ' . $mat[1] . ';">';
    $output .= str_replace(array('<br class="system_filter"/>', '<', '>'), array("\n", '&lt;', '&gt;'), $mat[2]);
    $output .= '</pre>';
  } else {
    $output = $mat[0];
  }
  
  return $output;
}

/**
 * <br class="system_filter"/> 转为 \n
 * @param (array) $mat
 */
function _editor_filter_code_pre_higth($mat) {
  $output = '<pre class="brush' . $mat[1] . '>';
  $output .= str_replace(array('<br class="system_filter"/>', '<', '>'), array("\n", '&lt;', '&gt;'), $mat[2]);
  $output .= '</pre>';
  return $output;
}

/**
 * @Implement of hook_filter()
 */
function editor_filter($op, $delta = NULL, $format = NULL, $value = NULL, $filter_id = NULL, $node_type = NULL, $node_nid = NULL) {
  switch ($op) {
    case 'view':
      switch ($delta) {
        case 'highlighter': // 代码高亮
          if (strpos($value, '[code=') === false) {
            /**
             * 直接通过 <pre> 标签添加的高亮代码
             * 将换行符过滤器转换为 \n
             */
            if (strpos($value, '<pre class="brush') !== false) {
              $value = preg_replace_callback('/<pre class="brush(.*?)>(.*?)<\/pre>/ims', '_editor_filter_code_pre_higth', $value);
              editor_get_highlighter();
            }
            return $value;
          }

          editor_get_highlighter();
          $value = preg_replace_callback('/\[code=([^\/]*?)\](.*?)\[\/code\]/ims', '_editor_filter_code_higth', $value);
        break;

        case 'smiley': // 表情转换
          $path = f(dd_get_path('module', 'editor') . '/editor/markitup/sets/dida/face/');
          $value = preg_replace('/\[smiley\](.*?)\[\/smiley\]/ims', "<img src='$path\${1}' />", $value);
        break;
      }
    return $value;
    
    case 'list':
    // 注册过滤器列表
    return array(
      'highlighter' => array(
        'title' => '代码高亮',
        'weight' => 10,
        'description' => '将 [code={type}][/code] 之间的代码做高亮处理，权重应低于换行符转换。若 HTML 过滤器同时启用，且设置为去除标签，代码高亮权重应高于 HTML 过滤器，同时过滤器中允许 pre 标签',
      ),
      'smiley' => array(
        'title' => '表情解析',
        'description' => '将 [smiley][/smiley] 转换为表情图片',
      ),
    );
  }
}
